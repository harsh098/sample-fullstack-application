services:
  redis:
    restart: always
    image: redis:7.0
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    command: ["redis-server"]
  
  postgres:
    image: bitnami/postgresql:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: ${PG_PASSWORD:-Secret}
      POSTGRES_USER: ${PG_USER:-pguser}
      POSTGRES_DB: app_db
    networks:
      - app_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  backend:
    image: ghcr.io/harsh098/samplefullstack_backend:latest
    restart: always
    networks:
      - app_network
    ports:
      - 8000:3000
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${PG_USER:-pguser}:${PG_PASSWORD:-Secret}@postgres:5432/app_db?sslmode=disable
      REDIS_URL: redis://redis:6379
    command: ["yarn", "run", "start:migrate:prod"]

  frontend:
    image: ghcr.io/harsh098/samplefullstack_frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_BACKEND_BASE_URL=${NEXT_PUBLIC_BACKEND_BASE_URL:-http://localhost:8000}
    restart: always
    ports:
      - 3000:3000
    networks:
      - app_network
    depends_on:
      - backend

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data: